blogTitle: Job description & technologies used
pageUnderConstruction: false
postMedia:
    - mediaType: Paragraph
      mediaText: |+
        Most of my work focused on maintaining data enrichment services, adding
        additional SLI alerting capabilities, and extending complex event
        processing systems.
    - mediaType: Header
      headerRank: 2
      mediaText: Production services

    - mediaType: Header
      headerRank: 3
      mediaText: Using and extending complex event processing pipeline
    - mediaType: Paragraph
      mediaText: |+
        Most observations that run through the system can be considered on
        their own; they are significant without any other context! Other
        observations require more context in order to be significant.
    - mediaType: Paragraph
      mediaText: |+
        For example, consider an incorrect password when the user logs in. On
        its own this is not significant. If you have 50 failed logins in 5
        minutes, that is more significant.
    - mediaType: Paragraph
      mediaText: |+
        In comes complex event processing and the concept of streaming data.
    - mediaType: Picture
      filePath: hadoop-flink.png
      tagStyle: height:150px;
    - mediaType: Paragraph
      mediaText: |+
        I learned that time is not simple at all when considering streaming
        data. There is latency and partitions in all networks, so its hard to
        know when all the data that you are going to recieve will arrive.
    - mediaType: Picture
      filePath: timeskew.jpg
      tagStyle: height:350px;
    - mediaType: Paragraph
      mediaText: |+
        One strategy is to wait one minute, and then declare that no data more
        late than one minute is valid. This comes with a trade-off. If you are
        dropping lots of data for being too old, you can extend the length of
        time you wait. However this will also mean you delay your processing
        of the data that long and must buffer it. Alternatively you can
        improve the timeliness of your output by making the window shorter. At
        the same time you end up dropping more tardy data.
    - mediaType: Picture
      filePath: windowTypes.jpg
      tagStyle: height:150px;
    - mediaType: Paragraph
      mediaText: |+
        While working with Arctic Wolf's complex event processing system I
        learned how and when to use all the above window types. Fixed windows
        are useful for questions about fixed intervals in time like,
    - mediaType: Paragraph
      mediaText: |+
        "how many X events happen during the day".
    - mediaType: Paragraph
      mediaText: |+
        Sliding windows are useful for questions like,
    - mediaType: Paragraph
      mediaText: |+
        "how many X events happened during the last 5 minutes".
    - mediaType: Paragraph
      mediaText: |+
        Session windows are useful for questions where a set of events become
        significant after some initiating event like,
    - mediaType: Paragraph
      mediaText: |+
        "Output an alert when a user runs untrusted software, but only after
        receiving a malicious link"

    - mediaType: Header
      headerRank: 2
      mediaText: Internal tooling
    - mediaType: Paragraph
      mediaText: |+
        There are always efficiency gains to be made by reducing toil.
        I helped create developer bliss by improving automation and workflows.

    - mediaType: Header
      headerRank: 3
      mediaText: Onboarding and documentation
    - mediaType: Paragraph
      mediaText: |+
        Onboarding new developers to projects can be confusing and slow if
        there's no documentation about what dependencies the project needs, or
        how it builds. This can make the new developer discouraged, and less
        likely to be engaged or devoted to the project.
    - mediaType: Paragraph
      mediaText: |+
        To make this process easier, I ensured each project I worked on would
        have update documentation that included all the commands needed to set
        up a development environment. Furthermore, if a service had a
        complicated deploy or system testing procedure, I authored a document
        that outlined in detail the process.

    - mediaType: Header
      headerRank: 3
      mediaText: Automated SLI monitoring and alerting
    - mediaType: Paragraph
      mediaText: |+
        At Arctic Wolf, software reliability engineering is a team duty.
        There are so many services, and different service level indicators for
        each service; getting timely alerts from failing services is a real
        challenge! In order to make this process easier, each team gets a
        grafana dashboard they can customize with their important SLIs.
    - mediaType: Picture
      filePath: graphiteAndGrafana.png
      tagStyle: width:100%;
    - mediaType: Paragraph
      mediaText: |+
        I helped add additional metrics to many services, and send them to the
        metrics store. The garbage collector instrumentation I added was
        critical when debugging the performance of a java service. I also
        added automatic monitoring and alerts to those metrics using nagios.
